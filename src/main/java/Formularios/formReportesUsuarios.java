/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Formularios;

import Controladores.traerJson;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONObject;
//reportes
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author cmadrid
 */
public class formReportesUsuarios extends javax.swing.JFrame {

    private JPanel panelChartPanel1;
    traerJson getData = new traerJson();
    String jsonUsuarios = traerJson.getUsuarios();
    JSONArray jsonArray = new JSONArray(jsonUsuarios);

    /**
     * Creates new form formReportesUsuarios
     */
    public formReportesUsuarios() {
        initComponents();
        initChart();
        llenarTablaUsuarios();
    }

    private void initChart() {
        // Datos de ejemplo
        // Suponiendo que esto es tu método estático
        int confirmedUsers = 0;
        int notConfirmedUsers = 0;

        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject jsonObject = jsonArray.getJSONObject(i);
            int confirmado = jsonObject.optInt("confirmado");
            if (confirmado == 1) {
                confirmedUsers++;
            } else {
                notConfirmedUsers++;
            }
        }

        // Crear dataset
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.addValue(confirmedUsers, "Confirmados", "");
        dataset.addValue(notConfirmedUsers, "No Confirmados", "");

        // Crear el gráfico
        JFreeChart chart = ChartFactory.createBarChart(
                "Confirmación de Usuarios",
                "Estado",
                "Cantidad",
                dataset
        );

        // Crear el ChartPanel con el gráfico
        contenedorHeader = new ChartPanel(chart);
        contenedorHeader.setBounds(10, 10, 400, 400); // Ajustar las dimensiones según sea necesario

        // Agregar el ChartPanel al JFrame
        getContentPane().add(contenedorHeader);
        getContentPane().revalidate();
        getContentPane().repaint();
        //panelChartPanel.add(panelChartPanel1);
    }

    private void llenarTablaUsuarios() {
        // Obtener el JSON como una String

        // Parsear el JSON
        JSONArray jsonArray = new JSONArray(jsonUsuarios);

        // Obtener el modelo de la tabla (puedes crear un modelo personalizado si es necesario)
        DefaultTableModel modelo = (DefaultTableModel) tablaUsuarios.getModel();

        // Definir las columnas de la tabla
        modelo.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Apellido", "Email", "Confirmado", "Admin"});

        // Limpiar el modelo por si ya tenía filas
        modelo.setRowCount(0);

        // Iterar sobre el array JSON y añadir filas al modelo
        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject jsonObject = jsonArray.getJSONObject(i);
            int id = jsonObject.optInt("id");
            String nombre = jsonObject.optString("nombre");
            String apellido = jsonObject.optString("apellido");
            String email = jsonObject.optString("email");
            boolean confirmado = jsonObject.optInt("confirmado") == 1;
            boolean admin = jsonObject.optInt("admin") == 1;

            // Añadir fila al modelo
            modelo.addRow(new Object[]{id, nombre, apellido, email, confirmado, admin});
        }

        // Asignar el modelo a la tabla
        tablaUsuarios.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contenedorHeader = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaUsuarios = new javax.swing.JTable();
        btnReporte = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("jButton1");

        javax.swing.GroupLayout contenedorHeaderLayout = new javax.swing.GroupLayout(contenedorHeader);
        contenedorHeader.setLayout(contenedorHeaderLayout);
        contenedorHeaderLayout.setHorizontalGroup(
            contenedorHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorHeaderLayout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jButton1)
                .addContainerGap(227, Short.MAX_VALUE))
        );
        contenedorHeaderLayout.setVerticalGroup(
            contenedorHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorHeaderLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jButton1)
                .addContainerGap(229, Short.MAX_VALUE))
        );

        tablaUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaUsuarios);

        btnReporte.setText("Reporte");
        btnReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReporteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(contenedorHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 896, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(contenedorHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91)
                .addComponent(btnReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReporteActionPerformed
        // TODO add your handling code here:
        generarPDF();

    }//GEN-LAST:event_btnReporteActionPerformed

    private void generarPDF() {
        Document document = new Document();

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar Reporte");

        // Establecer una sugerencia para el nombre del archivo
        fileChooser.setSelectedFile(new File("ReporteUsuarios.pdf"));

        // Mostrar el diálogo de guardar archivo
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            // Asegúrate de que el archivo tenga la extensión .pdf
            if (!fileToSave.getAbsolutePath().endsWith(".pdf")) {
                fileToSave = new File(fileToSave.getAbsolutePath() + ".pdf");
            }

            try {
                // Crear un PdfWriter que escucha al documento y escribe a un archivo
                PdfWriter.getInstance(document, new FileOutputStream(fileToSave));

                // Abrir el documento
                document.open();

                // Crear un párrafo y agregarlo al documento
                Font smallBold = new Font(Font.FontFamily.HELVETICA, 10, Font.BOLD);
                Font titleFont = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);
                Paragraph title = new Paragraph("Reporte de Usuarios", titleFont);
                title.setAlignment(Element.ALIGN_CENTER);
                document.add(title);

                document.add(Chunk.NEWLINE);

                // Formatear y mostrar la fecha actual
                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                String currentDate = dateFormat.format(new Date());
                Paragraph fecha = new Paragraph("Fecha: " + currentDate, smallBold);
                fecha.setAlignment(Element.ALIGN_RIGHT);
                document.add(fecha);

                // Agregar otro espacio en blanco
                document.add(Chunk.NEWLINE);

                Font headerFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
                Font bodyFont = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL);

                PdfPCell headerCell = new PdfPCell();
                headerCell.setBackgroundColor(BaseColor.LIGHT_GRAY);
                headerCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                headerCell.setPadding(5);

                PdfPTable table = new PdfPTable(5); // Número de columnas

                headerCell.setPhrase(new Phrase("ID", headerFont));
                table.addCell(headerCell);

                headerCell.setPhrase(new Phrase("Nombre", headerFont));
                table.addCell(headerCell);

                headerCell.setPhrase(new Phrase("Apellido", headerFont));
                table.addCell(headerCell);

                headerCell.setPhrase(new Phrase("Email", headerFont));
                table.addCell(headerCell);

                headerCell.setPhrase(new Phrase("Confirmado", headerFont));
                table.addCell(headerCell);

                PdfPCell bodyCell = new PdfPCell();
                bodyCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                bodyCell.setPadding(5);

                for (int i = 0; i < jsonArray.length(); i++) {
                    JSONObject jsonObject = jsonArray.getJSONObject(i);

                    bodyCell.setPhrase(new Phrase(jsonObject.optString("id"), bodyFont));
                    table.addCell(bodyCell);
                    bodyCell.setPhrase(new Phrase(jsonObject.optString("nombre"), bodyFont));
                    table.addCell(bodyCell);
                    bodyCell.setPhrase(new Phrase(jsonObject.optString("apellido"), bodyFont));
                    table.addCell(bodyCell);
                    bodyCell.setPhrase(new Phrase(jsonObject.optString("email"), bodyFont));
                    table.addCell(bodyCell);
                    bodyCell.setPhrase(new Phrase(jsonObject.optString("confirmado"), bodyFont));
                    table.addCell(bodyCell);
                }

                // Agregar la tabla al documento
                document.add(table);

            } catch (DocumentException | FileNotFoundException e) {
                // Utiliza StringWriter para capturar la traza de la excepción en un String
                StringWriter sw = new StringWriter();
                PrintWriter pw = new PrintWriter(sw);
                e.printStackTrace(pw);
                String exceptionText = sw.toString();

                // Muestra la traza de la excepción en el cuadro de diálogo
                JOptionPane.showMessageDialog(this, exceptionText, "Alerta", JOptionPane.WARNING_MESSAGE);
            } finally {
                // Cerrar el documento
                document.close();
                try {
                    Desktop.getDesktop().open(fileToSave);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "No se pudo abrir el archivo", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(formReportesUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(formReportesUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(formReportesUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(formReportesUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new formReportesUsuarios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReporte;
    private javax.swing.JPanel contenedorHeader;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaUsuarios;
    // End of variables declaration//GEN-END:variables
}
